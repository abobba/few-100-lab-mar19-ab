!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(1);var r=n(5),o=0;r.ready(function(){var e,t;e=a.length>0?a[1]:"",t=document.querySelector("#billInput"),alert("Am I working?"),document.querySelectorAll(".btn-tip").forEach(function(t){"tip"===t.id.substr(0,3)&&(t.addEventListener("click",s),t.id===e&&(alert("Tip last chosen was "+e),t.disabled=!0))}),t.addEventListener("input",u),t.addEventListener("input",l),t.addEventListener("keydown",c),document.querySelectorAll(".form-check-input").forEach(function(e){e.addEventListener("input",l)}),l()});var i="tipAmtStored",a=localStorage.getItem(i)?JSON.parse(localStorage.getItem(i)):[];function s(e){var t,n;t=parseInt(e.srcElement.value),n=e.srcElement.id,localStorage.setItem(i,JSON.stringify([t,n])),document.querySelectorAll(".btn").forEach(function(e){"btn"===e.id.substr(0,3)&&(e.disabled=!1)}),e.srcElement.disabled=!0,l()}function u(e){var t=e.srcElement.value,n=["^(?:[0-9]*(?:.[0-9]{1,2})?|(?:[0-9]+.))$","Value must be in a valid currency form."],r=new RegExp(n[0],"");""==t||r.test(t)?e.srcElement.setCustomValidity(""):e.srcElement.setCustomValidity(n[1])}function c(e){"e"!==e.key&&"E"!==e.key||(e.returnValue=!1)}function l(){var e;(e=document.getElementById("amtinput")).valueAsNumber<0?(o=0,e.classList.add("error")):(o=""==e.value?0:e.valueAsNumber,e.classList.remove("error"));var t,n=(t=localStorage.getItem(i)?JSON.parse(localStorage.getItem(i)):[]).length>0?parseInt(t[0]):0,r=o*n/100,a=o+r;document.getElementById("tipPercent").innerHTML=""+n,document.getElementById("billAmount").innerHTML="Bill Amount: "+o,document.getElementById("tipPercentAmount").innerHTML="Tip Percentage: "+n+"%",document.getElementById("tipAmount").innerHTML="Amount of tip: "+r,document.getElementById("totalAmount").innerHTML="Total to be Paid: "+a}t.notAllowE=c},function(e,t,n){var r=n(2);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){},function(e,t,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),u=null,c=0,l=[],f=n(4);function d(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(h(r.parts[a],t))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(h(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:s}}}}function p(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function m(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),l.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(e.insertAt.before,n);n.insertBefore(t,o)}}function v(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=l.indexOf(e);t>=0&&l.splice(t,1)}function y(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return b(t,e.attrs),m(e,t),t}function b(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function h(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=i}if(t.singleton){var a=c++;n=u||(u=y(t)),r=w.bind(null,n,a,!1),o=w.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",b(t,e.attrs),m(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=f(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,t),o=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=y(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){v(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return d(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(s=i[a.id]).refs--,r.push(s)}e&&d(p(e,t),t);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete i[s.id]}}}};var g,E=(g=[],function(e,t){return g[e]=t,g.filter(Boolean).join("\n")});function w(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=E(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ready=function(e){document.onreadystatechange=function(){"interactive"==document.readyState&&e()}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZXMuY3NzPzFlNDMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwidXRpbHNfMSIsImJpbGxhbXQiLCJyZWFkeSIsInNhdmVkVGlwSWQiLCJiaWxsSW5wdXQiLCJ0aXBTdG9yZWRJdGVtcyIsImxlbmd0aCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImFsZXJ0IiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJhQnV0dG9uIiwiaWQiLCJzdWJzdHIiLCJhZGRFdmVudExpc3RlbmVyIiwicHJvY2Vzc1RpcFBlcmNlbnQiLCJkaXNhYmxlZCIsInZhbGlkYXRlSW5wdXQiLCJ1cGRhdGVPdXRwdXQiLCJub3RBbGxvd0UiLCJhbklucHV0IiwidGlwQW10U3RvcmVkIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIkpTT04iLCJwYXJzZSIsImUiLCJwYXJzZUludCIsInNyY0VsZW1lbnQiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwiY29uc3RyYWludHMiLCJjb25zdHJhaW50IiwiUmVnRXhwIiwidGVzdCIsInNldEN1c3RvbVZhbGlkaXR5IiwicmV0dXJuVmFsdWUiLCJpbnB1dCIsImdldEVsZW1lbnRCeUlkIiwidmFsdWVBc051bWJlciIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsInRpcFBlcmNlbnQiLCJ0aXBBbW91bnQiLCJ0b3RhbEFtb3VudCIsImlubmVySFRNTCIsImNvbnRlbnQiLCJvcHRpb25zIiwiaG1yIiwidHJhbnNmb3JtIiwiaW5zZXJ0SW50byIsInVuZGVmaW5lZCIsImxvY2FscyIsImZuIiwibWVtbyIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsIndpbmRvdyIsImFsbCIsImF0b2IiLCJhcHBseSIsInRoaXMiLCJhcmd1bWVudHMiLCJnZXRFbGVtZW50IiwidGFyZ2V0IiwicGFyZW50Iiwic3R5bGVUYXJnZXQiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwic3R5bGVzSW5zZXJ0ZWRBdFRvcCIsImZpeFVybHMiLCJhZGRTdHlsZXNUb0RvbSIsInN0eWxlcyIsIml0ZW0iLCJkb21TdHlsZSIsInJlZnMiLCJqIiwicGFydHMiLCJwdXNoIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJsaXN0IiwibmV3U3R5bGVzIiwiYmFzZSIsInBhcnQiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwiRXJyb3IiLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsImluc2VydEF0IiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJhcHBlbmRDaGlsZCIsImZpcnN0Q2hpbGQiLCJiZWZvcmUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJpZHgiLCJpbmRleE9mIiwic3BsaWNlIiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImF0dHJzIiwidHlwZSIsIm5vbmNlIiwibmMiLCJnZXROb25jZSIsImFkZEF0dHJzIiwiZWwiLCJrZXlzIiwic2V0QXR0cmlidXRlIiwib2JqIiwidXBkYXRlIiwicmVzdWx0IiwiZGVmYXVsdCIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiQmxvYiIsImJ0b2EiLCJsaW5rIiwicmVsIiwiY3JlYXRlTGlua0VsZW1lbnQiLCJhdXRvRml4VXJscyIsImNvbnZlcnRUb0Fic29sdXRlVXJscyIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiYmxvYiIsIm9sZFNyYyIsImhyZWYiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNyZWF0ZVRleHROb2RlIiwibmV3T2JqIiwiREVCVUciLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJpbmRleCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiQm9vbGVhbiIsImpvaW4iLCJjc3NOb2RlIiwiY2hpbGROb2RlcyIsImxvY2F0aW9uIiwiYmFzZVVybCIsInByb3RvY29sIiwiaG9zdCIsImN1cnJlbnREaXIiLCJwYXRobmFtZSIsInJlcGxhY2UiLCJmdWxsTWF0Y2giLCJvcmlnVXJsIiwibmV3VXJsIiwidW5xdW90ZWRPcmlnVXJsIiwidHJpbSIsIiQxIiwiY2IiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsR0FBQSxDQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFFBQUEsSUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsRUFBQSxDQUEwQ0ssWUFBQSxFQUFBQyxJQUFBTCxLQUsxQ1osRUFBQWtCLEVBQUEsU0FBQWhCLEdBQ0Esb0JBQUFpQixlQUFBQyxhQUNBTixPQUFBQyxlQUFBYixFQUFBaUIsT0FBQUMsWUFBQSxDQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQWIsRUFBQSxjQUFpRG1CLE9BQUEsS0FRakRyQixFQUFBc0IsRUFBQSxTQUFBRCxFQUFBRSxHQUVBLEdBREEsRUFBQUEsSUFBQUYsRUFBQXJCLEVBQUFxQixJQUNBLEVBQUFFLEVBQUEsT0FBQUYsRUFDQSxLQUFBRSxHQUFBLGlCQUFBRixRQUFBRyxXQUFBLE9BQUFILEVBQ0EsSUFBQUksRUFBQVgsT0FBQVksT0FBQSxNQUdBLEdBRkExQixFQUFBa0IsRUFBQU8sR0FDQVgsT0FBQUMsZUFBQVUsRUFBQSxXQUF5Q1QsWUFBQSxFQUFBSyxVQUN6QyxFQUFBRSxHQUFBLGlCQUFBRixFQUFBLFFBQUFNLEtBQUFOLEVBQUFyQixFQUFBVSxFQUFBZSxFQUFBRSxFQUFBLFNBQUFBLEdBQWdILE9BQUFOLEVBQUFNLElBQXFCQyxLQUFBLEtBQUFELElBQ3JJLE9BQUFGLEdBSUF6QixFQUFBNkIsRUFBQSxTQUFBMUIsR0FDQSxJQUFBUyxFQUFBVCxLQUFBcUIsV0FDQSxXQUEyQixPQUFBckIsRUFBQSxTQUMzQixXQUFpQyxPQUFBQSxHQUVqQyxPQURBSCxFQUFBVSxFQUFBRSxFQUFBLElBQUFBLEdBQ0FBLEdBSUFaLEVBQUFhLEVBQUEsU0FBQWlCLEVBQUFDLEdBQXNELE9BQUFqQixPQUFBa0IsVUFBQUMsZUFBQTFCLEtBQUF1QixFQUFBQyxJQUd0RC9CLEVBQUFrQyxFQUFBLEdBSUFsQyxJQUFBbUMsRUFBQSxtRkNqRkFuQyxFQUFBLEdBQ0EsSUFBQW9DLEVBQUFwQyxFQUFBLEdBRUlxQyxFQUFVLEVBRWRELEVBQUFFLE1BQU0sV0FhTixJQUNRQyxFQUNBQyxFQURBRCxFQUFjRSxFQUFlQyxPQUFTLEVBQUtELEVBQWUsR0FBSyxHQUMvREQsRUFBWUcsU0FBU0MsY0FBYyxjQUV2Q0MsTUFBTSxpQkFDTkYsU0FBU0csaUJBQWlCLFlBQVlDLFFBQVEsU0FBQ0MsR0FDZCxRQUExQkEsRUFBUUMsR0FBR0MsT0FBTyxFQUFFLEtBQ25CRixFQUFRRyxpQkFBaUIsUUFBU0MsR0FDL0JKLEVBQVFDLEtBQU9WLElBQ2RNLE1BQU0sdUJBQXlCTixHQUM5QlMsRUFBOEJLLFVBQVcsTUFNdERiLEVBQVVXLGlCQUFpQixRQUFTRyxHQUNwQ2QsRUFBVVcsaUJBQWlCLFFBQVNJLEdBQ3BDZixFQUFVVyxpQkFBaUIsVUFBV0ssR0FFdENiLFNBQVNHLGlCQUFpQixxQkFBcUJDLFFBQVEsU0FBQ1UsR0FDcERBLEVBQVFOLGlCQUFpQixRQUFTSSxLQUV0Q0EsTUEvQkosSUFBTUcsRUFBZSxlQUNqQmpCLEVBQWlCa0IsYUFBYUMsUUFBUUYsR0FBZ0JHLEtBQUtDLE1BQU1ILGFBQWFDLFFBQVFGLElBQWlCLEdBaUMzRyxTQUFTTixFQUFrQlcsR0FRM0IsSUFBeUIxQyxFQUFZNEIsRUFBWjVCLEVBUEwyQyxTQUFTRCxFQUFFRSxXQUFXNUMsT0FPTDRCLEVBUGFjLEVBQUVFLFdBQVdoQixHQVE1RFUsYUFBYU8sUUFBUVIsRUFBY0csS0FBS00sVUFBVSxDQUFDOUMsRUFBTTRCLEtBSXhETixTQUFTRyxpQkFBaUIsUUFBUUMsUUFBUSxTQUFDQyxHQUNWLFFBQTFCQSxFQUFRQyxHQUFHQyxPQUFPLEVBQUUsS0FDbEJGLEVBQThCSyxVQUFXLEtBWm5EVSxFQUFFRSxXQUFXWixVQUFXLEVBRXZCRSxJQWdDSixTQUFTRCxFQUFjUyxHQUNuQixJQUFJMUMsRUFBUTBDLEVBQUVFLFdBQVc1QyxNQUNyQitDLEVBQWMsQ0FBQywyQ0FBOEMsMkNBQzdEQyxFQUFhLElBQUlDLE9BQU9GLEVBQVksR0FBSSxJQUUvQixJQUFUL0MsR0FBZWdELEVBQVdFLEtBQUtsRCxHQUMvQjBDLEVBQUVFLFdBQVdPLGtCQUFrQixJQUcvQlQsRUFBRUUsV0FBV08sa0JBQWtCSixFQUFZLElBSW5ELFNBQWdCWixFQUFVTyxHQUNULE1BQVZBLEVBQUVwQyxLQUF5QixNQUFWb0MsRUFBRXBDLE1BQWFvQyxFQUFFVSxhQUFjLEdBSXZELFNBQVNsQixJQW5DVCxJQUNRbUIsS0FBMkIvQixTQUFTZ0MsZUFBZSxhQUU5Q0MsY0FBZ0IsR0FDckJ2QyxFQUFVLEVBQ1ZxQyxFQUFNRyxVQUFVQyxJQUFJLFdBSWhCekMsRUFEYSxJQUFkcUMsRUFBTXJELE1BQ0ssRUFFQXFELEVBQU1FLGNBRXBCRixFQUFNRyxVQUFVRSxPQUFPLFVBd0IzQixJQXZGSXRDLEVBdUZBdUMsR0F2RkF2QyxFQUFpQmtCLGFBQWFDLFFBQVFGLEdBQWdCRyxLQUFLQyxNQUFNSCxhQUFhQyxRQUFRRixJQUFpQixJQUNwRmhCLE9BQVMsRUFBS3NCLFNBQVN2QixFQUFlLElBQU0sRUF1Ri9Ed0MsRUFBWTVDLEVBQVUyQyxFQUFhLElBQ25DRSxFQUFjN0MsRUFBVTRDLEVBRTVCdEMsU0FBU2dDLGVBQWUsY0FBY1EsVUFBWSxHQUFHSCxFQUNyRHJDLFNBQVNnQyxlQUFlLGNBQWNRLFVBQVksZ0JBQWdCOUMsRUFDbEVNLFNBQVNnQyxlQUFlLG9CQUFvQlEsVUFBWSxtQkFBbUJILEVBQVUsSUFDckZyQyxTQUFTZ0MsZUFBZSxhQUFhUSxVQUFZLGtCQUFrQkYsRUFFbkV0QyxTQUFTZ0MsZUFBZSxlQUFlUSxVQUFZLHFCQUFxQixFQWhCNUVqRixFQUFBc0QsNkJDOUZBLElBQUE0QixFQUFjcEYsRUFBUSxHQUV0QixpQkFBQW9GLE1BQUEsRUFBNENqRixFQUFBQyxFQUFTZ0YsRUFBQSxNQU9yRCxJQUFBQyxFQUFBLENBQWVDLEtBQUEsRUFFZkMsZUFQQUEsRUFRQUMsZ0JBQUFDLEdBRWF6RixFQUFRLEVBQVJBLENBQXdEb0YsRUFBQUMsR0FFckVELEVBQUFNLFNBQUF2RixFQUFBRCxRQUFBa0YsRUFBQU0sMkNDWkEsSUFFQUMsRUFDQUMsRUFIQUMsRUFBQSxHQVdBQyxHQVRBSCxFQVNBLFdBTUEsT0FBQUksUUFBQXBELG1CQUFBcUQsTUFBQUQsT0FBQUUsTUFaQSxXQUVBLFlBREEsSUFBQUwsTUFBQUQsRUFBQU8sTUFBQUMsS0FBQUMsWUFDQVIsSUFvQkFTLEVBQUEsU0FBQVYsR0FDQSxJQUFBQyxFQUFBLEdBRUEsZ0JBQUFVLEVBQUFDLEdBTUEsc0JBQUFELEVBQ0EsT0FBQUEsSUFFQSxZQUFBVixFQUFBVSxHQUFBLENBQ0EsSUFBQUUsRUFwQkEsU0FBQUYsRUFBQUMsR0FDQSxPQUFBQSxFQUNBQSxFQUFBM0QsY0FBQTBELEdBRUEzRCxTQUFBQyxjQUFBMEQsSUFnQkEvRixLQUFBNEYsS0FBQUcsRUFBQUMsR0FFQSxHQUFBUixPQUFBVSxtQkFBQUQsYUFBQVQsT0FBQVUsa0JBQ0EsSUFHQUQsSUFBQUUsZ0JBQUFDLEtBQ0ssTUFBQTVDLEdBQ0x5QyxFQUFBLEtBR0FaLEVBQUFVLEdBQUFFLEVBRUEsT0FBQVosRUFBQVUsSUExQkEsR0E4QkFNLEVBQUEsS0FDQUMsRUFBQSxFQUNBQyxFQUFBLEdBRUFDLEVBQWMvRyxFQUFRLEdBcUR0QixTQUFBZ0gsRUFBQUMsRUFBQTVCLEdBQ0EsUUFBQWpGLEVBQUEsRUFBZ0JBLEVBQUE2RyxFQUFBdkUsT0FBbUJ0QyxJQUFBLENBQ25DLElBQUE4RyxFQUFBRCxFQUFBN0csR0FDQStHLEVBQUF0QixFQUFBcUIsRUFBQWpFLElBRUEsR0FBQWtFLEVBQUEsQ0FDQUEsRUFBQUMsT0FFQSxRQUFBQyxFQUFBLEVBQWlCQSxFQUFBRixFQUFBRyxNQUFBNUUsT0FBMkIyRSxJQUM1Q0YsRUFBQUcsTUFBQUQsR0FBQUgsRUFBQUksTUFBQUQsSUFHQSxLQUFRQSxFQUFBSCxFQUFBSSxNQUFBNUUsT0FBdUIyRSxJQUMvQkYsRUFBQUcsTUFBQUMsS0FBQUMsRUFBQU4sRUFBQUksTUFBQUQsR0FBQWhDLFFBRUcsQ0FDSCxJQUFBaUMsRUFBQSxHQUVBLElBQUFELEVBQUEsRUFBaUJBLEVBQUFILEVBQUFJLE1BQUE1RSxPQUF1QjJFLElBQ3hDQyxFQUFBQyxLQUFBQyxFQUFBTixFQUFBSSxNQUFBRCxHQUFBaEMsSUFHQVEsRUFBQXFCLEVBQUFqRSxJQUFBLENBQTJCQSxHQUFBaUUsRUFBQWpFLEdBQUFtRSxLQUFBLEVBQUFFLFdBSzNCLFNBQUFHLEVBQUFDLEVBQUFyQyxHQUlBLElBSEEsSUFBQTRCLEVBQUEsR0FDQVUsRUFBQSxHQUVBdkgsRUFBQSxFQUFnQkEsRUFBQXNILEVBQUFoRixPQUFpQnRDLElBQUEsQ0FDakMsSUFBQThHLEVBQUFRLEVBQUF0SCxHQUNBNkMsRUFBQW9DLEVBQUF1QyxLQUFBVixFQUFBLEdBQUE3QixFQUFBdUMsS0FBQVYsRUFBQSxHQUlBVyxFQUFBLENBQWNDLElBSGRaLEVBQUEsR0FHY2EsTUFGZGIsRUFBQSxHQUVjYyxVQURkZCxFQUFBLElBR0FTLEVBQUExRSxHQUNBMEUsRUFBQTFFLEdBQUFxRSxNQUFBQyxLQUFBTSxHQURBWixFQUFBTSxLQUFBSSxFQUFBMUUsR0FBQSxDQUFrREEsS0FBQXFFLE1BQUEsQ0FBQU8sS0FJbEQsT0FBQVosRUFHQSxTQUFBZ0IsRUFBQTVDLEVBQUE2QyxHQUNBLElBQUE1QixFQUFBRCxFQUFBaEIsRUFBQUcsWUFFQSxJQUFBYyxFQUNBLFVBQUE2QixNQUFBLCtHQUdBLElBQUFDLEVBQUF0QixJQUFBcEUsT0FBQSxHQUVBLFdBQUEyQyxFQUFBZ0QsU0FDQUQsRUFFR0EsRUFBQUUsWUFDSGhDLEVBQUFpQyxhQUFBTCxFQUFBRSxFQUFBRSxhQUVBaEMsRUFBQWtDLFlBQUFOLEdBSkE1QixFQUFBaUMsYUFBQUwsRUFBQTVCLEVBQUFtQyxZQU1BM0IsRUFBQVMsS0FBQVcsUUFDRSxjQUFBN0MsRUFBQWdELFNBQ0YvQixFQUFBa0MsWUFBQU4sT0FDRSxxQkFBQTdDLEVBQUFnRCxXQUFBaEQsRUFBQWdELFNBQUFLLE9BSUYsVUFBQVAsTUFBQSw4TEFIQSxJQUFBRyxFQUFBakMsRUFBQWhCLEVBQUFnRCxTQUFBSyxPQUFBcEMsR0FDQUEsRUFBQWlDLGFBQUFMLEVBQUFJLElBTUEsU0FBQUssRUFBQVQsR0FDQSxVQUFBQSxFQUFBVSxXQUFBLFNBQ0FWLEVBQUFVLFdBQUFDLFlBQUFYLEdBRUEsSUFBQVksRUFBQWhDLEVBQUFpQyxRQUFBYixHQUNBWSxHQUFBLEdBQ0FoQyxFQUFBa0MsT0FBQUYsRUFBQSxHQUlBLFNBQUFHLEVBQUE1RCxHQUNBLElBQUE2QyxFQUFBdkYsU0FBQXVHLGNBQUEsU0FNQSxRQUpBekQsSUFBQUosRUFBQThELE1BQUFDLE9BQ0EvRCxFQUFBOEQsTUFBQUMsS0FBQSxpQkFHQTNELElBQUFKLEVBQUE4RCxNQUFBRSxNQUFBLENBQ0EsSUFBQUEsRUFnQ0EsV0FDSyxFQUlMLE9BQVFySixFQUFBc0osR0FyQ1JDLEdBQ0FGLElBQ0FoRSxFQUFBOEQsTUFBQUUsU0FPQSxPQUhBRyxFQUFBdEIsRUFBQTdDLEVBQUE4RCxPQUNBbEIsRUFBQTVDLEVBQUE2QyxHQUVBQSxFQWlCQSxTQUFBc0IsRUFBQUMsRUFBQU4sR0FDQXJJLE9BQUE0SSxLQUFBUCxHQUFBcEcsUUFBQSxTQUFBcEIsR0FDQThILEVBQUFFLGFBQUFoSSxFQUFBd0gsRUFBQXhILE1BWUEsU0FBQTZGLEVBQUFvQyxFQUFBdkUsR0FDQSxJQUFBNkMsRUFBQTJCLEVBQUE5RSxFQUFBK0UsRUFHQSxHQUFBekUsRUFBQUUsV0FBQXFFLEVBQUE5QixJQUFBLENBS0EsS0FKQWdDLEVBQUEsbUJBQUF6RSxFQUFBRSxVQUNBRixFQUFBRSxVQUFBcUUsRUFBQTlCLEtBQ0F6QyxFQUFBRSxVQUFBd0UsUUFBQUgsRUFBQTlCLE1BU0Esb0JBSkE4QixFQUFBOUIsSUFBQWdDLEVBVUEsR0FBQXpFLEVBQUF1QixVQUFBLENBQ0EsSUFBQW9ELEVBQUFuRCxJQUVBcUIsRUFBQXRCLE1BQUFxQyxFQUFBNUQsSUFFQXdFLEVBQUFJLEVBQUFySSxLQUFBLEtBQUFzRyxFQUFBOEIsR0FBQSxHQUNBakYsRUFBQWtGLEVBQUFySSxLQUFBLEtBQUFzRyxFQUFBOEIsR0FBQSxRQUdBSixFQUFBNUIsV0FDQSxtQkFBQWtDLEtBQ0EsbUJBQUFBLElBQUFDLGlCQUNBLG1CQUFBRCxJQUFBRSxpQkFDQSxtQkFBQUMsTUFDQSxtQkFBQUMsTUFFQXBDLEVBbEVBLFNBQUE3QyxHQUNBLElBQUFrRixFQUFBNUgsU0FBQXVHLGNBQUEsUUFVQSxZQVJBekQsSUFBQUosRUFBQThELE1BQUFDLE9BQ0EvRCxFQUFBOEQsTUFBQUMsS0FBQSxZQUVBL0QsRUFBQThELE1BQUFxQixJQUFBLGFBRUFoQixFQUFBZSxFQUFBbEYsRUFBQThELE9BQ0FsQixFQUFBNUMsRUFBQWtGLEdBRUFBLEVBdURBRSxDQUFBcEYsR0FDQXdFLEVBaUZBLFNBQUFVLEVBQUFsRixFQUFBdUUsR0FDQSxJQUFBOUIsRUFBQThCLEVBQUE5QixJQUNBRSxFQUFBNEIsRUFBQTVCLFVBUUEwQyxPQUFBakYsSUFBQUosRUFBQXNGLHVCQUFBM0MsR0FFQTNDLEVBQUFzRix1QkFBQUQsS0FDQTVDLEVBQUFmLEVBQUFlLElBR0FFLElBRUFGLEdBQUEsdURBQXVEd0MsS0FBQU0sU0FBQUMsbUJBQUFoSCxLQUFBTSxVQUFBNkQsTUFBQSxPQUd2RCxJQUFBOEMsRUFBQSxJQUFBVCxLQUFBLENBQUF2QyxHQUFBLENBQTZCc0IsS0FBQSxhQUU3QjJCLEVBQUFSLEVBQUFTLEtBRUFULEVBQUFTLEtBQUFkLElBQUFDLGdCQUFBVyxHQUVBQyxHQUFBYixJQUFBRSxnQkFBQVcsSUE1R0FuSixLQUFBLEtBQUFzRyxFQUFBN0MsR0FDQU4sRUFBQSxXQUNBNEQsRUFBQVQsR0FFQUEsRUFBQThDLE1BQUFkLElBQUFFLGdCQUFBbEMsRUFBQThDLFNBR0E5QyxFQUFBZSxFQUFBNUQsR0FDQXdFLEVBc0RBLFNBQUEzQixFQUFBMEIsR0FDQSxJQUFBOUIsRUFBQThCLEVBQUE5QixJQUNBQyxFQUFBNkIsRUFBQTdCLE1BRUFBLEdBQ0FHLEVBQUF5QixhQUFBLFFBQUE1QixHQUdBLEdBQUFHLEVBQUErQyxXQUNBL0MsRUFBQStDLFdBQUFDLFFBQUFwRCxNQUNFLENBQ0YsS0FBQUksRUFBQU8sWUFDQVAsRUFBQVcsWUFBQVgsRUFBQU8sWUFHQVAsRUFBQU0sWUFBQTdGLFNBQUF3SSxlQUFBckQsTUFyRUFsRyxLQUFBLEtBQUFzRyxHQUNBbkQsRUFBQSxXQUNBNEQsRUFBQVQsS0FNQSxPQUZBMkIsRUFBQUQsR0FFQSxTQUFBd0IsR0FDQSxHQUFBQSxFQUFBLENBQ0EsR0FDQUEsRUFBQXRELE1BQUE4QixFQUFBOUIsS0FDQXNELEVBQUFyRCxRQUFBNkIsRUFBQTdCLE9BQ0FxRCxFQUFBcEQsWUFBQTRCLEVBQUE1QixVQUVBLE9BR0E2QixFQUFBRCxFQUFBd0IsUUFFQXJHLEtBMVBBNUUsRUFBQUQsUUFBQSxTQUFBd0gsRUFBQXJDLEdBQ0EsdUJBQUFnRyxjQUNBLGlCQUFBMUksU0FBQSxVQUFBd0YsTUFBQSxpRUFHQTlDLEtBQUEsSUFFQThELE1BQUEsaUJBQUE5RCxFQUFBOEQsTUFBQTlELEVBQUE4RCxNQUFBLEdBSUE5RCxFQUFBdUIsV0FBQSxrQkFBQXZCLEVBQUF1QixZQUFBdkIsRUFBQXVCLFVBQUFkLEtBR0FULEVBQUFHLGFBQUFILEVBQUFHLFdBQUEsUUFHQUgsRUFBQWdELFdBQUFoRCxFQUFBZ0QsU0FBQSxVQUVBLElBQUFwQixFQUFBUSxFQUFBQyxFQUFBckMsR0FJQSxPQUZBMkIsRUFBQUMsRUFBQTVCLEdBRUEsU0FBQWlHLEdBR0EsSUFGQSxJQUFBQyxFQUFBLEdBRUFuTCxFQUFBLEVBQWlCQSxFQUFBNkcsRUFBQXZFLE9BQW1CdEMsSUFBQSxDQUNwQyxJQUFBOEcsRUFBQUQsRUFBQTdHLElBQ0ErRyxFQUFBdEIsRUFBQXFCLEVBQUFqRSxLQUVBbUUsT0FDQW1FLEVBQUFoRSxLQUFBSixHQUdBbUUsR0FFQXRFLEVBREFTLEVBQUE2RCxFQUFBakcsR0FDQUEsR0FHQSxJQUFBakYsRUFBQSxFQUFpQkEsRUFBQW1MLEVBQUE3SSxPQUFzQnRDLElBQUEsQ0FDdkMsSUFBQStHLEVBRUEsUUFGQUEsRUFBQW9FLEVBQUFuTCxJQUVBZ0gsS0FBQSxDQUNBLFFBQUFDLEVBQUEsRUFBbUJBLEVBQUFGLEVBQUFHLE1BQUE1RSxPQUEyQjJFLElBQUFGLEVBQUFHLE1BQUFELFlBRTlDeEIsRUFBQXNCLEVBQUFsRSxRQWtOQSxJQUNBdUksRUFEQUMsR0FDQUQsRUFBQSxHQUVBLFNBQUFFLEVBQUFDLEdBR0EsT0FGQUgsRUFBQUUsR0FBQUMsRUFFQUgsRUFBQUksT0FBQUMsU0FBQUMsS0FBQSxRQUlBLFNBQUE3QixFQUFBL0IsRUFBQXdELEVBQUEzRyxFQUFBNkUsR0FDQSxJQUFBOUIsRUFBQS9DLEVBQUEsR0FBQTZFLEVBQUE5QixJQUVBLEdBQUFJLEVBQUErQyxXQUNBL0MsRUFBQStDLFdBQUFDLFFBQUFPLEVBQUFDLEVBQUE1RCxPQUNFLENBQ0YsSUFBQWlFLEVBQUFwSixTQUFBd0ksZUFBQXJELEdBQ0FrRSxFQUFBOUQsRUFBQThELFdBRUFBLEVBQUFOLElBQUF4RCxFQUFBVyxZQUFBbUQsRUFBQU4sSUFFQU0sRUFBQXRKLE9BQ0F3RixFQUFBSyxhQUFBd0QsRUFBQUMsRUFBQU4sSUFFQXhELEVBQUFNLFlBQUF1RCxvQkM3VUE1TCxFQUFBRCxRQUFBLFNBQUE0SCxHQUVBLElBQUFtRSxFQUFBLG9CQUFBbEcsZUFBQWtHLFNBRUEsSUFBQUEsRUFDQSxVQUFBOUQsTUFBQSxvQ0FJQSxJQUFBTCxHQUFBLGlCQUFBQSxFQUNBLE9BQUFBLEVBR0EsSUFBQW9FLEVBQUFELEVBQUFFLFNBQUEsS0FBQUYsRUFBQUcsS0FDQUMsRUFBQUgsRUFBQUQsRUFBQUssU0FBQUMsUUFBQSxpQkEyREEsT0EvQkF6RSxFQUFBeUUsUUFBQSwrREFBQUMsRUFBQUMsR0FFQSxJQVdBQyxFQVhBQyxFQUFBRixFQUNBRyxPQUNBTCxRQUFBLG9CQUFBMUwsRUFBQWdNLEdBQXdDLE9BQUFBLElBQ3hDTixRQUFBLG9CQUFBMUwsRUFBQWdNLEdBQXdDLE9BQUFBLElBR3hDLDBEQUFBdEksS0FBQW9JLEdBQ0FILEdBUUFFLEVBRkEsSUFBQUMsRUFBQTVELFFBQUEsTUFFQTRELEVBQ0csSUFBQUEsRUFBQTVELFFBQUEsS0FFSG1ELEVBQUFTLEVBR0FOLEVBQUFNLEVBQUFKLFFBQUEsWUFJQSxPQUFBMUksS0FBQU0sVUFBQXVJLEdBQUEsdUZDbkZBeE0sRUFBQW9DLE1BQUEsU0FBc0J3SyxHQUNoQm5LLFNBQVNvSyxtQkFBcUIsV0FDRCxlQUF2QnBLLFNBQVNxSyxZQUVYRiIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiXHJcbmltcG9ydCAnLi9zdHlsZXMuY3NzJztcclxuaW1wb3J0IHsgcmVhZHkgfSBmcm9tICcuL3V0aWxzJztcclxuXHJcbmxldCBiaWxsYW10ID0gMDtcclxuXHJcbnJlYWR5KCgpID0+IHtcclxuICAgIGluaXQoKTtcclxuXHJcbn0pO1xyXG5cclxuY29uc3QgdGlwQW10U3RvcmVkID0gJ3RpcEFtdFN0b3JlZCc7XHJcbmxldCB0aXBTdG9yZWRJdGVtcyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRpcEFtdFN0b3JlZCkgPyBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRpcEFtdFN0b3JlZCkpIDogW107XHJcblxyXG5mdW5jdGlvbiBzYXZlZFRpcCgpIHtcclxuICAgIGxldCB0aXBTdG9yZWRJdGVtcyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRpcEFtdFN0b3JlZCkgPyBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRpcEFtdFN0b3JlZCkpIDogW107XHJcbiAgICByZXR1cm4gKHRpcFN0b3JlZEl0ZW1zLmxlbmd0aCA+IDApID8gcGFyc2VJbnQodGlwU3RvcmVkSXRlbXNbMF0pIDogMDtcclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdCgpIHtcclxuICAgIGxldCBzYXZlZFRpcElkID0gKHRpcFN0b3JlZEl0ZW1zLmxlbmd0aCA+IDApID8gdGlwU3RvcmVkSXRlbXNbMV0gOiBcIlwiO1xyXG4gICAgbGV0IGJpbGxJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYmlsbElucHV0XCIpO1xyXG5cclxuICAgIGFsZXJ0KFwiQW0gSSB3b3JraW5nP1wiKTtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuYnRuLXRpcFwiKS5mb3JFYWNoKChhQnV0dG9uKSA9PiB7XHJcbiAgICAgICAgaWYoYUJ1dHRvbi5pZC5zdWJzdHIoMCwzKSA9PT0ndGlwJyl7XHJcbiAgICAgICAgICAgIGFCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBwcm9jZXNzVGlwUGVyY2VudCk7XHJcbiAgICAgICAgICAgIGlmKGFCdXR0b24uaWQgPT09IHNhdmVkVGlwSWQpe1xyXG4gICAgICAgICAgICAgICAgYWxlcnQoXCJUaXAgbGFzdCBjaG9zZW4gd2FzIFwiICsgc2F2ZWRUaXBJZCk7XHJcbiAgICAgICAgICAgICAgICAoYUJ1dHRvbiBhcyBIVE1MQnV0dG9uRWxlbWVudCkuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICB9ICAgICAgIFxyXG4gICAgfSk7XHJcblxyXG4gICAgYmlsbElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgdmFsaWRhdGVJbnB1dCk7XHJcbiAgICBiaWxsSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB1cGRhdGVPdXRwdXQpO1xyXG4gICAgYmlsbElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBub3RBbGxvd0UpO1xyXG5cclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5mb3JtLWNoZWNrLWlucHV0JykuZm9yRWFjaCgoYW5JbnB1dCkgPT4ge1xyXG4gICAgICAgIGFuSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB1cGRhdGVPdXRwdXQpO1xyXG4gICAgfSlcclxuICAgIHVwZGF0ZU91dHB1dCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwcm9jZXNzVGlwUGVyY2VudChlOiBhbnkpIHtcclxuICAgIHN0b3JlVGlwUGVyY2VudChwYXJzZUludChlLnNyY0VsZW1lbnQudmFsdWUpLCBlLnNyY0VsZW1lbnQuaWQpO1xyXG4gICBlbmFibGVUaXBCdXR0b25zKCk7XHJcbiAgIGUuc3JjRWxlbWVudC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICBcclxuICAgIHVwZGF0ZU91dHB1dCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzdG9yZVRpcFBlcmNlbnQodmFsdWU6IGFueSwgaWQ6IGFueSkge1xyXG4gICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aXBBbXRTdG9yZWQsIEpTT04uc3RyaW5naWZ5KFt2YWx1ZSxpZF0pKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZW5hYmxlVGlwQnV0dG9ucygpIHtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5idG4nKS5mb3JFYWNoKChhQnV0dG9uKSA9PiB7XHJcbiAgICAgICAgaWYoYUJ1dHRvbi5pZC5zdWJzdHIoMCwzKSA9PT0nYnRuJyl7XHJcbiAgICAgICAgICAgIChhQnV0dG9uIGFzIEhUTUxCdXR0b25FbGVtZW50KS5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgIH07XHJcbiAgICB9KTsgICAgXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHByb2Nlc3NCaWxsQW1vdW50KCkge1xyXG4gICAgbGV0IGlucHV0ID0gKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYW10aW5wdXRcIikpO1xyXG5cclxuICAgIGlmKGlucHV0LnZhbHVlQXNOdW1iZXIgPCAwKXtcclxuICAgICAgICBiaWxsYW10ID0gMDtcclxuICAgICAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKCdlcnJvcicpOyAgXHJcbiAgICB9IFxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYoaW5wdXQudmFsdWUgPT1cIlwiKSB7XHJcbiAgICAgICAgICAgIGJpbGxhbXQgPSAwO1xyXG4gICAgICAgIH0gZWxzZSB7IFxyXG4gICAgICAgICAgICBiaWxsYW10ID0gaW5wdXQudmFsdWVBc051bWJlcjtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlucHV0LmNsYXNzTGlzdC5yZW1vdmUoJ2Vycm9yJyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHZhbGlkYXRlSW5wdXQoZTogYW55KSB7XHJcbiAgICBsZXQgdmFsdWUgPSBlLnNyY0VsZW1lbnQudmFsdWU7XHJcbiAgICBsZXQgY29uc3RyYWludHMgPSBbJ14oPzpbMC05XSooPzpcXC5bMC05XXsxLDJ9KT98KD86WzAtOV0rXFwuKSkkJywgJ1ZhbHVlIG11c3QgYmUgaW4gYSB2YWxpZCBjdXJyZW5jeSBmb3JtLiddXHJcbiAgICBsZXQgY29uc3RyYWludCA9IG5ldyBSZWdFeHAoY29uc3RyYWludHNbMF0sIFwiXCIpO1xyXG5cclxuICAgIGlmICh2YWx1ZSA9PSBcIlwiIHx8IGNvbnN0cmFpbnQudGVzdCh2YWx1ZSkpIHtcclxuICAgICAgICBlLnNyY0VsZW1lbnQuc2V0Q3VzdG9tVmFsaWRpdHkoXCJcIik7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBlLnNyY0VsZW1lbnQuc2V0Q3VzdG9tVmFsaWRpdHkoY29uc3RyYWludHNbMV0pO1xyXG4gICAgfSBcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG5vdEFsbG93RShlOiBhbnkpIHtcclxuICAgIGlmKGUua2V5ID09PSAnZScgfHwgZS5rZXkgPT09ICdFJyl7ZS5yZXR1cm5WYWx1ZSA9IGZhbHNlfTtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZU91dHB1dCgpIHtcclxuICAgIHByb2Nlc3NCaWxsQW1vdW50KCk7XHJcbiAgICBsZXQgdGlwUGVyY2VudCA9IHNhdmVkVGlwKCk7XHJcbiAgICBsZXQgdGlwQW1vdW50ID0gYmlsbGFtdCAqIHRpcFBlcmNlbnQgLyAxMDA7XHJcbiAgICBsZXQgdG90YWxBbW91bnQgPSBiaWxsYW10ICsgdGlwQW1vdW50O1xyXG5cclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGlwUGVyY2VudFwiKS5pbm5lckhUTUwgPSBgJHt0aXBQZXJjZW50fWA7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJpbGxBbW91bnRcIikuaW5uZXJIVE1MID0gYEJpbGwgQW1vdW50OiAke2JpbGxhbXR9YDsgIFxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0aXBQZXJjZW50QW1vdW50XCIpLmlubmVySFRNTCA9IGBUaXAgUGVyY2VudGFnZTogJHt0aXBQZXJjZW50fSVgO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0aXBBbW91bnRcIikuaW5uZXJIVE1MID0gYEFtb3VudCBvZiB0aXA6ICR7dGlwQW1vdW50fWA7XHJcblxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0b3RhbEFtb3VudFwiKS5pbm5lckhUTUwgPSBgVG90YWwgdG8gYmUgUGFpZDogJHsodG90YWxBbW91bnQpfWA7XHJcbiAgICB9IFxyXG5cclxuXHJcbiAgICIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXJcdG1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW87XG5cblx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiBtZW1vO1xuXHR9O1xufTtcblxudmFyIGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcblx0Ly8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3Ncblx0Ly8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuXHQvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG5cdC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuXHQvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcblx0cmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xufSk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0LCBwYXJlbnQpIHtcbiAgaWYgKHBhcmVudCl7XG4gICAgcmV0dXJuIHBhcmVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG4gIH1cbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbih0YXJnZXQsIHBhcmVudCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0LCBwYXJlbnQpO1xuXHRcdFx0Ly8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblx0XHRcdGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcblx0XHR9XG5cdFx0cmV0dXJuIG1lbW9bdGFyZ2V0XVxuXHR9O1xufSkoKTtcblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXJcdHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xudmFyXHRzdHlsZXNJbnNlcnRlZEF0VG9wID0gW107XG5cbnZhclx0Zml4VXJscyA9IHJlcXVpcmUoXCIuL3VybHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIERFQlVHICE9PSBcInVuZGVmaW5lZFwiICYmIERFQlVHKSB7XG5cdFx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xuXHR9XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0b3B0aW9ucy5hdHRycyA9IHR5cGVvZiBvcHRpb25zLmF0dHJzID09PSBcIm9iamVjdFwiID8gb3B0aW9ucy5hdHRycyA6IHt9O1xuXG5cdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuXHQvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cdGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSBcImJvb2xlYW5cIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnRcbiAgICAgICAgaWYgKCFvcHRpb25zLmluc2VydEludG8pIG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0XG5cdGlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XG5cblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcblxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKG5ld0xpc3QpIHtcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG5cblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcblxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMsIG9wdGlvbnMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdGlmKGRvbVN0eWxlKSB7XG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAobGlzdCwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVzID0gW107XG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XG5cdFx0dmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XG5cblx0XHRpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHtcblx0dmFyIHRhcmdldCA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvKVxuXG5cdGlmICghdGFyZ2V0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cdH1cblxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XG5cblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcblx0XHRpZiAoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0fSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEF0LmJlZm9yZSwgdGFyZ2V0KTtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkge1xuXHRpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcblxuXHR2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblxuXHRpZihvcHRpb25zLmF0dHJzLm5vbmNlID09PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuXHRcdGlmIChub25jZSkge1xuXHRcdFx0b3B0aW9ucy5hdHRycy5ub25jZSA9IG5vbmNlO1xuXHRcdH1cblx0fVxuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGdldE5vbmNlKCkge1xuXHRpZiAodHlwZW9mIF9fd2VicGFja19ub25jZV9fID09PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0cmV0dXJuIF9fd2VicGFja19ub25jZV9fO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqLCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZSwgdXBkYXRlLCByZW1vdmUsIHJlc3VsdDtcblxuXHQvLyBJZiBhIHRyYW5zZm9ybSBmdW5jdGlvbiB3YXMgZGVmaW5lZCwgcnVuIGl0IG9uIHRoZSBjc3Ncblx0aWYgKG9wdGlvbnMudHJhbnNmb3JtICYmIG9iai5jc3MpIHtcblx0ICAgIHJlc3VsdCA9IHR5cGVvZiBvcHRpb25zLnRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdCA/IG9wdGlvbnMudHJhbnNmb3JtKG9iai5jc3MpIFxuXHRcdCA6IG9wdGlvbnMudHJhbnNmb3JtLmRlZmF1bHQob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsImV4cG9ydMKgZnVuY3Rpb27CoHJlYWR5KGNiOsKgYW55KSB7XHJcbiAgICDCoMKgZG9jdW1lbnQub25yZWFkeXN0YXRlY2hhbmdlwqA9wqBmdW5jdGlvbsKgKCkge1xyXG4gICAgwqDCoMKgwqBpZsKgKGRvY3VtZW50LnJlYWR5U3RhdGXCoD09wqBcImludGVyYWN0aXZlXCIpIHtcclxuICAgIMKgwqDCoMKgwqDCoC8vIEluaXRpYWxpemUgeW91ciBhcHBsaWNhdGlvbiBvciBydW4gc29tZSBjb2RlLlxyXG4gICAgwqDCoMKgwqDCoMKgY2IoKTtcclxuICAgIMKgwqDCoMKgfVxyXG4gICAgwqDCoH07XHJcbiAgICB9ICJdLCJzb3VyY2VSb290IjoiIn0=